plugins {
    id 'java-library'
    id 'com.gradleup.shadow' version '8.3.3'
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT'
    id 'com.diffplug.spotless' version '6.25.0'
}

group 'net.smoofyuniverse'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
}

configurations {
    spongevanilla
    spongeforge
    spongeneo
}

minecraft {
    version '1.21.4'
    accessWideners(file("src/main/resources/mirage.accesswidener"))
}

dependencies {
    api 'org.spongepowered:spongeapi:14.0.0'

    implementation('org.spongepowered:sponge:1.21.4-14.0.0-SNAPSHOT:dev') {
        exclude group: 'org.spongepowered', module: 'spongeapi'
    }
    implementation 'org.spongepowered:mixin:0.8.7'
    implementation 'org.ow2.asm:asm-util:9.8'

    implementation 'net.smoofyuniverse:oreupdater:1.6.0'
    implementation 'net.smoofyuniverse:worldmap:1.3.0'
    implementation 'net.smoofyuniverse:bingo:1.1.0'

    spongevanilla('org.spongepowered:spongevanilla:1.21.4-14.0.0-RC2255:universal') { transitive = false }
    spongeforge('org.spongepowered:spongeforge:1.21.4-54.1.3-14.0.0-RC2255:universal') { transitive = false }
    spongeneo('org.spongepowered:spongeneo:1.21.4-21.4.137-14.0.0-RC2255:universal') { transitive = false }
}

jar {
    archiveClassifier = 'base'
}

shadowJar {
    archiveClassifier = ''

    dependencies {
        include dependency('net.smoofyuniverse:oreapi')
        include dependency('net.smoofyuniverse:oreupdater')
        include dependency('net.smoofyuniverse:worldmap')
        include dependency('net.smoofyuniverse:bingo')
    }

    relocate 'net.smoofyuniverse.ore', 'net.smoofyuniverse.mirage.ore'
    relocate 'net.smoofyuniverse.map', 'net.smoofyuniverse.mirage.map'
    relocate 'net.smoofyuniverse.bingo', 'net.smoofyuniverse.mirage.bingo'

    manifest {
        attributes('MixinConfigs': 'mixins.mirage.json', 'Access-Widener': 'mirage.accesswidener')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "utf-8"
}

tasks.register('setupVanillaServer', Copy) {
    into 'run/vanilla'

    from configurations.spongevanilla
    rename('spongevanilla-(.*).jar', 'spongevanilla.jar')

    into('mods') {
        from shadowJar
    }
}

tasks.register('setupForgeServer', Copy) {
    into 'run/forge/mods'

    from configurations.spongeforge
    rename('spongeforge-(.*).jar', 'spongeforge.jar')

    from shadowJar
}

tasks.register('setupNeoServer', Copy) {
    into 'run/neoforge/mods'

    from configurations.spongeneo
    rename('spongeneo-(.*).jar', 'spongeneo.jar')

    from shadowJar
}

spotless {
    ratchetFrom 'origin/master'

    java {
        licenseHeaderFile(rootProject.file('HEADER'))
    }
}
